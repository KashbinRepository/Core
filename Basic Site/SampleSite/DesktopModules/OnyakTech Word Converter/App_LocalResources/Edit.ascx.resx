<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdUpdate.Text" xml:space="preserve">
    <value>Save Converted Word Document and Display</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Control Panel</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>For help, go to www.OnyakTech.com or email Support@OnyakTech.com</value>
  </data>
  <data name="lblSelectModule.Help" xml:space="preserve">
    <value>Select the Module you wish to display content from.</value>
  </data>
  <data name="lblSelectModule.Text" xml:space="preserve">
    <value>Select HTML Module</value>
  </data>
  <data name="lblSelectPage.Help" xml:space="preserve">
    <value>Select the page that the module you want to shadow is located on.</value>
  </data>
  <data name="lblSelectPage.Text" xml:space="preserve">
    <value>Select Page</value>
  </data>
  <data name="lblSelectPortal.Help" xml:space="preserve">
    <value>Select the portal that contains the module you want to display content from.</value>
  </data>
  <data name="lblSelectPortal.Text" xml:space="preserve">
    <value>Select Portal</value>
  </data>
  <data name="NoHTMLModulesFound.Text" xml:space="preserve">
    <value>The selected page does not contain an HTML Module.  Only HTML Modules content can be shadowed.</value>
  </data>
  <data name="NoModuleContentFound.Text" xml:space="preserve">
    <value>Content for the selected module could not be found.  Make sure content has been added to the selected module and then try again.</value>
  </data>
  <data name="Selected.Text" xml:space="preserve">
    <value>&lt;strong&gt;Selected HTML Module to Shadow:&lt;/strong&gt;</value>
  </data>
  <data name="SelectedUpdated.Text" xml:space="preserve">
    <value> - **Save Settings to Activate**</value>
  </data>
  <data name="FileUploaded.Text" xml:space="preserve">
    <value>Word Document Converted Successfully. To display the converted Word Document on your site, click "Save Converted Word Document and Display"</value>
  </data>
  <data name="lblUploadWord.Text" xml:space="preserve">
    <value>To convert a new Word Document, click Browse below and select your Word Document to upload.  After it's uploaded and converted to clean HTML you will see the contents of the conversion in the HTML Editor below.  At that point you can make any changes you need and then click "Save Converted Word Document and Display".  You can come back here at any time to make changes as you need them.  If you upload a new Word Document it will replace your previously uploaded content.</value>
  </data>
  <data name="lblWordEditor.Text" xml:space="preserve">
    <value>The contents of your converted Word Document is displayed below:</value>
  </data>
</root>